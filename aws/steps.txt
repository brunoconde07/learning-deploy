# -> Docker
# https://docs.docker.com/engine/install/ubuntu/

# Uninstall older docker versions

sudo apt-get remove docker docker-engine docker.io containerd runc

# Install docker

sudo apt-get update
sudo apt-get install \
   ca-certificates \
   curl \
   gnupg \
   lsb-release

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

# -> AWS CLI
# https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html

IAM > Users > Add User >
	> set Administrator as username
	> checkbox AWS Management Console access
	> select custom pwd
	> optional: checkbox Require password reset
	> button Next Permissions

> Add User To Group > Create Group
	> set Administrators as gorupname
	> Filter policies > AWS managed - job function
	> Policy list > check box for AdministratorAccess
	> Create Group
	> Refresh
	> button Next: Tags

> Next: Review

> Create User

-------

> AWS Management Console > Users
	> checkbox Administrator

> Security Credentials
	> Acess Keys > Create Acess Key

falta terminar
-----

# -> Instal AWS CLI
# https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

aws --version

# -> Install Lightsail Container
# https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-install-software#install-lightsailctl-on-linux

sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"

sudo chmod +x /usr/local/bin/lightsailctl

# -> Create the flask application
mkdir lightsail-containers-flask && cd lightsail-containers-flask

# -> touch app.py

	from flask import Flask
	app = Flask(__name__)

	@app.route('/')
	def hello_world():
	   return "Hello, World!"

	if __name__ == "__main__":
	   app.run(host='0.0.0.0', port=5000)

# -> touch requirements.txt

	flask==1.1.2

# -> touch Dockerfile

	# Set base image (host OS)
	FROM python:3.8-alpine

	# By default, listen on port 5000
	EXPOSE 5000/tcp

	# Set the working directory in the container
	WORKDIR /app

	# Copy the dependencies file to the working directory
	COPY requirements.txt .

	# Install any dependencies
	RUN pip install -r requirements.txt

	# Copy the content of the local src directory to the working directory
	COPY app.py .

	# Specify the command to run on container start
	CMD [ "python", "./app.py" ]

# -> build container image
# https://stackoverflow.com/questions/28996907/docker-build-requires-1-argument-see-docker-build-help

	sudo docker build -t flask-container .

	sudo docker run -p 5000:5000 flask-container

	curl localhost:5000

# -> Create a container service

	aws lightsail create-container-service --service-name flask-service \ --power small --scale 1

	or
	
	aws lightsail create-container-service --power small --scale 1 --service-name flask-service

	# Await status not PENDING

	-------------

	# -> Launch EC2

	EC2 > Launch Instance > Ubuntu Server 18.04 > Select

	Step 02: Choose an instance type

		t2 micro > Next: configure instance details > Next: Add Storage > Next: add Tags

	Step 05: Add Tags

		button add tag > 

			key: flask_test_hw
			value: EC2_instance_1

			> Next: Configure Security Group

Step 06: Configure Security Group

	Add rule > 

		Type: All Traffic
		Protocol: All
		Port Range: 0-65535
		Source: Anywhere

		> Review and Launch

> button Launch

	> Create new key pair

		Key pair type: ED25519
		Key pair name: flask_test_hw_aws_ec2_instance
		> button Download key pair

		> Launch Instances > View Instances > Click on Instance ID

		Click on EC2 > Instances

		> Click on checkbox > Click on Connect Button > SSH Client

		on terminal, execute ./loggin_server.sh

# -> Setup python project

	virtualenv -p /usr/bin/python3.9 venv
	source venv/bin/activate
	touch requirements
		flask==1.1.2
		gunicorn==19.9.0
	pip install -r requirements.txt
	pip freeze > requirements.txt

# Test python project

	touch app.py

		from flask import Flask
		app = Flask(__name__)


		@app.route('/')
		def hello_world():
		    return "Hello, World!"


		if __name__ == "__main__":
		    app.run(host='0.0.0.0', port=8080)

	python app.py

	curl http://127.0.0.1:8080

# -> Copy local files to remote server
	scp -i flask_test_hw_aws_ec2_instance.pem app.py ubuntu@3.15.145.47:/home/ubuntu

	scp -i flask_test_hw_aws_ec2_instance.pem requirements.txt ubuntu@3.15.145.47:/home/ubuntu